/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './typechain'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export abstract class EpochTokenLocker extends Contract {
  //   constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
  public abstract clone(): EpochTokenLocker
  public methods: {
    lastCreditBatchId(arg0: string, arg1: string): TransactionObject<string>

    BATCH_TIME(): TransactionObject<string>

    deposit(token: string, amount: number | string): TransactionObject<void>

    requestWithdraw(token: string, amount: number | string): TransactionObject<void>

    requestFutureWithdraw(token: string, amount: number | string, batchId: number | string): TransactionObject<void>

    withdraw(user: string, token: string): TransactionObject<void>

    getPendingDepositAmount(user: string, token: string): TransactionObject<string>

    getPendingDepositBatchNumber(user: string, token: string): TransactionObject<string>

    getPendingWithdrawAmount(user: string, token: string): TransactionObject<string>

    getPendingWithdrawBatchNumber(user: string, token: string): TransactionObject<string>

    getCurrentBatchId(): TransactionObject<string>

    getSecondsRemainingInBatch(): TransactionObject<string>

    getBalance(user: string, token: string): TransactionObject<string>

    hasValidWithdrawRequest(user: string, token: string): TransactionObject<boolean>
  }
  public events: {
    Deposit: ContractEvent<{
      user: string
      token: string
      amount: string
      stateIndex: string
      0: string
      1: string
      2: string
      3: string
    }>
    WithdrawRequest: ContractEvent<{
      user: string
      token: string
      amount: string
      stateIndex: string
      0: string
      1: string
      2: string
      3: string
    }>
    Withdraw: ContractEvent<{
      user: string
      token: string
      amount: string
      0: string
      1: string
      2: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
