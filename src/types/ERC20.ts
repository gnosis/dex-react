/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './typechain'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export abstract class ERC20 extends Contract {
  // constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
  public abstract clone(): ERC20
  public methods: {
    totalSupply(): TransactionObject<string>

    decimals(): TransactionObject<string>

    symbol(): TransactionObject<string>

    name(): TransactionObject<string>

    balanceOf(owner: string): TransactionObject<string>

    allowance(owner: string, spender: string): TransactionObject<string>

    transfer(to: string, value: number | string): TransactionObject<boolean>

    approve(spender: string, value: number | string): TransactionObject<boolean>

    transferFrom(from: string, to: string, value: number | string): TransactionObject<boolean>
  }
  public events: {
    Transfer: ContractEvent<{
      from: string
      to: string
      value: string
      0: string
      1: string
      2: string
    }>
    Approval: ContractEvent<{
      owner: string
      spender: string
      value: string
      0: string
      1: string
      2: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
